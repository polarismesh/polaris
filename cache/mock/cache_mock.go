// Code generated by MockGen. DO NOT EDIT.
// Source: api/types.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	api "github.com/polarismesh/polaris/cache/api"
	model "github.com/polarismesh/polaris/common/model"
	auth "github.com/polarismesh/polaris/common/model/auth"
	store "github.com/polarismesh/polaris/store"
	model0 "github.com/polarismesh/specification/source/go/api/v1/model"
	security "github.com/polarismesh/specification/source/go/api/v1/security"
	service_manage "github.com/polarismesh/specification/source/go/api/v1/service_manage"
	traffic_manage "github.com/polarismesh/specification/source/go/api/v1/traffic_manage"
	reflect "reflect"
	time "time"
)

// MockCache is a mock of Cache interface
type MockCache struct {
	ctrl     *gomock.Controller
	recorder *MockCacheMockRecorder
}

// MockCacheMockRecorder is the mock recorder for MockCache
type MockCacheMockRecorder struct {
	mock *MockCache
}

// NewMockCache creates a new mock instance
func NewMockCache(ctrl *gomock.Controller) *MockCache {
	mock := &MockCache{ctrl: ctrl}
	mock.recorder = &MockCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCache) EXPECT() *MockCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCache)(nil).Update))
}

// Clear mocks base method
func (m *MockCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockCache)(nil).Clear))
}

// Name mocks base method
func (m *MockCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCache)(nil).Name))
}

// Close mocks base method
func (m *MockCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCache)(nil).Close))
}

// MockCacheManager is a mock of CacheManager interface
type MockCacheManager struct {
	ctrl     *gomock.Controller
	recorder *MockCacheManagerMockRecorder
}

// MockCacheManagerMockRecorder is the mock recorder for MockCacheManager
type MockCacheManagerMockRecorder struct {
	mock *MockCacheManager
}

// NewMockCacheManager creates a new mock instance
func NewMockCacheManager(ctrl *gomock.Controller) *MockCacheManager {
	mock := &MockCacheManager{ctrl: ctrl}
	mock.recorder = &MockCacheManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCacheManager) EXPECT() *MockCacheManagerMockRecorder {
	return m.recorder
}

// GetUpdateCacheInterval mocks base method
func (m *MockCacheManager) GetUpdateCacheInterval() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpdateCacheInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetUpdateCacheInterval indicates an expected call of GetUpdateCacheInterval
func (mr *MockCacheManagerMockRecorder) GetUpdateCacheInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpdateCacheInterval", reflect.TypeOf((*MockCacheManager)(nil).GetUpdateCacheInterval))
}

// GetReportInterval mocks base method
func (m *MockCacheManager) GetReportInterval() time.Duration {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReportInterval")
	ret0, _ := ret[0].(time.Duration)
	return ret0
}

// GetReportInterval indicates an expected call of GetReportInterval
func (mr *MockCacheManagerMockRecorder) GetReportInterval() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReportInterval", reflect.TypeOf((*MockCacheManager)(nil).GetReportInterval))
}

// GetCacher mocks base method
func (m *MockCacheManager) GetCacher(cacheIndex api.CacheIndex) api.Cache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacher", cacheIndex)
	ret0, _ := ret[0].(api.Cache)
	return ret0
}

// GetCacher indicates an expected call of GetCacher
func (mr *MockCacheManagerMockRecorder) GetCacher(cacheIndex interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacher", reflect.TypeOf((*MockCacheManager)(nil).GetCacher), cacheIndex)
}

// RegisterCacher mocks base method
func (m *MockCacheManager) RegisterCacher(cacheIndex api.CacheIndex, item api.Cache) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterCacher", cacheIndex, item)
}

// RegisterCacher indicates an expected call of RegisterCacher
func (mr *MockCacheManagerMockRecorder) RegisterCacher(cacheIndex, item interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterCacher", reflect.TypeOf((*MockCacheManager)(nil).RegisterCacher), cacheIndex, item)
}

// OpenResourceCache mocks base method
func (m *MockCacheManager) OpenResourceCache(entries ...api.ConfigEntry) error {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range entries {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "OpenResourceCache", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// OpenResourceCache indicates an expected call of OpenResourceCache
func (mr *MockCacheManagerMockRecorder) OpenResourceCache(entries ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenResourceCache", reflect.TypeOf((*MockCacheManager)(nil).OpenResourceCache), entries...)
}

// Service mocks base method
func (m *MockCacheManager) Service() api.ServiceCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Service")
	ret0, _ := ret[0].(api.ServiceCache)
	return ret0
}

// Service indicates an expected call of Service
func (mr *MockCacheManagerMockRecorder) Service() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Service", reflect.TypeOf((*MockCacheManager)(nil).Service))
}

// Instance mocks base method
func (m *MockCacheManager) Instance() api.InstanceCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Instance")
	ret0, _ := ret[0].(api.InstanceCache)
	return ret0
}

// Instance indicates an expected call of Instance
func (mr *MockCacheManagerMockRecorder) Instance() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Instance", reflect.TypeOf((*MockCacheManager)(nil).Instance))
}

// RoutingConfig mocks base method
func (m *MockCacheManager) RoutingConfig() api.RoutingConfigCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RoutingConfig")
	ret0, _ := ret[0].(api.RoutingConfigCache)
	return ret0
}

// RoutingConfig indicates an expected call of RoutingConfig
func (mr *MockCacheManagerMockRecorder) RoutingConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RoutingConfig", reflect.TypeOf((*MockCacheManager)(nil).RoutingConfig))
}

// CL5 mocks base method
func (m *MockCacheManager) CL5() api.L5Cache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CL5")
	ret0, _ := ret[0].(api.L5Cache)
	return ret0
}

// CL5 indicates an expected call of CL5
func (mr *MockCacheManagerMockRecorder) CL5() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CL5", reflect.TypeOf((*MockCacheManager)(nil).CL5))
}

// RateLimit mocks base method
func (m *MockCacheManager) RateLimit() api.RateLimitCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RateLimit")
	ret0, _ := ret[0].(api.RateLimitCache)
	return ret0
}

// RateLimit indicates an expected call of RateLimit
func (mr *MockCacheManagerMockRecorder) RateLimit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RateLimit", reflect.TypeOf((*MockCacheManager)(nil).RateLimit))
}

// CircuitBreaker mocks base method
func (m *MockCacheManager) CircuitBreaker() api.CircuitBreakerCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CircuitBreaker")
	ret0, _ := ret[0].(api.CircuitBreakerCache)
	return ret0
}

// CircuitBreaker indicates an expected call of CircuitBreaker
func (mr *MockCacheManagerMockRecorder) CircuitBreaker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CircuitBreaker", reflect.TypeOf((*MockCacheManager)(nil).CircuitBreaker))
}

// FaultDetector mocks base method
func (m *MockCacheManager) FaultDetector() api.FaultDetectCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FaultDetector")
	ret0, _ := ret[0].(api.FaultDetectCache)
	return ret0
}

// FaultDetector indicates an expected call of FaultDetector
func (mr *MockCacheManagerMockRecorder) FaultDetector() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FaultDetector", reflect.TypeOf((*MockCacheManager)(nil).FaultDetector))
}

// ServiceContract mocks base method
func (m *MockCacheManager) ServiceContract() api.ServiceContractCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ServiceContract")
	ret0, _ := ret[0].(api.ServiceContractCache)
	return ret0
}

// ServiceContract indicates an expected call of ServiceContract
func (mr *MockCacheManagerMockRecorder) ServiceContract() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ServiceContract", reflect.TypeOf((*MockCacheManager)(nil).ServiceContract))
}

// LaneRule mocks base method
func (m *MockCacheManager) LaneRule() api.LaneCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LaneRule")
	ret0, _ := ret[0].(api.LaneCache)
	return ret0
}

// LaneRule indicates an expected call of LaneRule
func (mr *MockCacheManagerMockRecorder) LaneRule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LaneRule", reflect.TypeOf((*MockCacheManager)(nil).LaneRule))
}

// User mocks base method
func (m *MockCacheManager) User() api.UserCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(api.UserCache)
	return ret0
}

// User indicates an expected call of User
func (mr *MockCacheManagerMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockCacheManager)(nil).User))
}

// AuthStrategy mocks base method
func (m *MockCacheManager) AuthStrategy() api.StrategyCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AuthStrategy")
	ret0, _ := ret[0].(api.StrategyCache)
	return ret0
}

// AuthStrategy indicates an expected call of AuthStrategy
func (mr *MockCacheManagerMockRecorder) AuthStrategy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AuthStrategy", reflect.TypeOf((*MockCacheManager)(nil).AuthStrategy))
}

// Namespace mocks base method
func (m *MockCacheManager) Namespace() api.NamespaceCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Namespace")
	ret0, _ := ret[0].(api.NamespaceCache)
	return ret0
}

// Namespace indicates an expected call of Namespace
func (mr *MockCacheManagerMockRecorder) Namespace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Namespace", reflect.TypeOf((*MockCacheManager)(nil).Namespace))
}

// Client mocks base method
func (m *MockCacheManager) Client() api.ClientCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Client")
	ret0, _ := ret[0].(api.ClientCache)
	return ret0
}

// Client indicates an expected call of Client
func (mr *MockCacheManagerMockRecorder) Client() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Client", reflect.TypeOf((*MockCacheManager)(nil).Client))
}

// ConfigFile mocks base method
func (m *MockCacheManager) ConfigFile() api.ConfigFileCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigFile")
	ret0, _ := ret[0].(api.ConfigFileCache)
	return ret0
}

// ConfigFile indicates an expected call of ConfigFile
func (mr *MockCacheManagerMockRecorder) ConfigFile() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigFile", reflect.TypeOf((*MockCacheManager)(nil).ConfigFile))
}

// ConfigGroup mocks base method
func (m *MockCacheManager) ConfigGroup() api.ConfigGroupCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ConfigGroup")
	ret0, _ := ret[0].(api.ConfigGroupCache)
	return ret0
}

// ConfigGroup indicates an expected call of ConfigGroup
func (mr *MockCacheManagerMockRecorder) ConfigGroup() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ConfigGroup", reflect.TypeOf((*MockCacheManager)(nil).ConfigGroup))
}

// Gray mocks base method
func (m *MockCacheManager) Gray() api.GrayCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Gray")
	ret0, _ := ret[0].(api.GrayCache)
	return ret0
}

// Gray indicates an expected call of Gray
func (mr *MockCacheManagerMockRecorder) Gray() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Gray", reflect.TypeOf((*MockCacheManager)(nil).Gray))
}

// Role mocks base method
func (m *MockCacheManager) Role() api.RoleCache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Role")
	ret0, _ := ret[0].(api.RoleCache)
	return ret0
}

// Role indicates an expected call of Role
func (mr *MockCacheManagerMockRecorder) Role() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Role", reflect.TypeOf((*MockCacheManager)(nil).Role))
}

// MockNamespaceCache is a mock of NamespaceCache interface
type MockNamespaceCache struct {
	ctrl     *gomock.Controller
	recorder *MockNamespaceCacheMockRecorder
}

// MockNamespaceCacheMockRecorder is the mock recorder for MockNamespaceCache
type MockNamespaceCacheMockRecorder struct {
	mock *MockNamespaceCache
}

// NewMockNamespaceCache creates a new mock instance
func NewMockNamespaceCache(ctrl *gomock.Controller) *MockNamespaceCache {
	mock := &MockNamespaceCache{ctrl: ctrl}
	mock.recorder = &MockNamespaceCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockNamespaceCache) EXPECT() *MockNamespaceCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockNamespaceCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockNamespaceCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockNamespaceCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockNamespaceCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockNamespaceCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockNamespaceCache)(nil).Update))
}

// Clear mocks base method
func (m *MockNamespaceCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockNamespaceCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockNamespaceCache)(nil).Clear))
}

// Name mocks base method
func (m *MockNamespaceCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockNamespaceCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockNamespaceCache)(nil).Name))
}

// Close mocks base method
func (m *MockNamespaceCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockNamespaceCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockNamespaceCache)(nil).Close))
}

// GetNamespace mocks base method
func (m *MockNamespaceCache) GetNamespace(id string) *model.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespace", id)
	ret0, _ := ret[0].(*model.Namespace)
	return ret0
}

// GetNamespace indicates an expected call of GetNamespace
func (mr *MockNamespaceCacheMockRecorder) GetNamespace(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespace", reflect.TypeOf((*MockNamespaceCache)(nil).GetNamespace), id)
}

// GetNamespacesByName mocks base method
func (m *MockNamespaceCache) GetNamespacesByName(names []string) []*model.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespacesByName", names)
	ret0, _ := ret[0].([]*model.Namespace)
	return ret0
}

// GetNamespacesByName indicates an expected call of GetNamespacesByName
func (mr *MockNamespaceCacheMockRecorder) GetNamespacesByName(names interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespacesByName", reflect.TypeOf((*MockNamespaceCache)(nil).GetNamespacesByName), names)
}

// GetNamespaceList mocks base method
func (m *MockNamespaceCache) GetNamespaceList() []*model.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceList")
	ret0, _ := ret[0].([]*model.Namespace)
	return ret0
}

// GetNamespaceList indicates an expected call of GetNamespaceList
func (mr *MockNamespaceCacheMockRecorder) GetNamespaceList() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceList", reflect.TypeOf((*MockNamespaceCache)(nil).GetNamespaceList))
}

// GetVisibleNamespaces mocks base method
func (m *MockNamespaceCache) GetVisibleNamespaces(namespace string) []*model.Namespace {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisibleNamespaces", namespace)
	ret0, _ := ret[0].([]*model.Namespace)
	return ret0
}

// GetVisibleNamespaces indicates an expected call of GetVisibleNamespaces
func (mr *MockNamespaceCacheMockRecorder) GetVisibleNamespaces(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisibleNamespaces", reflect.TypeOf((*MockNamespaceCache)(nil).GetVisibleNamespaces), namespace)
}

// Query mocks base method
func (m *MockNamespaceCache) Query(arg0 context.Context, arg1 *api.NamespaceArgs) (uint32, []*model.Namespace, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.Namespace)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query
func (mr *MockNamespaceCacheMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockNamespaceCache)(nil).Query), arg0, arg1)
}

// MockServiceCache is a mock of ServiceCache interface
type MockServiceCache struct {
	ctrl     *gomock.Controller
	recorder *MockServiceCacheMockRecorder
}

// MockServiceCacheMockRecorder is the mock recorder for MockServiceCache
type MockServiceCacheMockRecorder struct {
	mock *MockServiceCache
}

// NewMockServiceCache creates a new mock instance
func NewMockServiceCache(ctrl *gomock.Controller) *MockServiceCache {
	mock := &MockServiceCache{ctrl: ctrl}
	mock.recorder = &MockServiceCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceCache) EXPECT() *MockServiceCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockServiceCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockServiceCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockServiceCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockServiceCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockServiceCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceCache)(nil).Update))
}

// Clear mocks base method
func (m *MockServiceCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockServiceCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockServiceCache)(nil).Clear))
}

// Name mocks base method
func (m *MockServiceCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockServiceCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockServiceCache)(nil).Name))
}

// Close mocks base method
func (m *MockServiceCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockServiceCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockServiceCache)(nil).Close))
}

// GetNamespaceCntInfo mocks base method
func (m *MockServiceCache) GetNamespaceCntInfo(namespace string) model.NamespaceServiceCount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNamespaceCntInfo", namespace)
	ret0, _ := ret[0].(model.NamespaceServiceCount)
	return ret0
}

// GetNamespaceCntInfo indicates an expected call of GetNamespaceCntInfo
func (mr *MockServiceCacheMockRecorder) GetNamespaceCntInfo(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNamespaceCntInfo", reflect.TypeOf((*MockServiceCache)(nil).GetNamespaceCntInfo), namespace)
}

// GetAllNamespaces mocks base method
func (m *MockServiceCache) GetAllNamespaces() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllNamespaces")
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetAllNamespaces indicates an expected call of GetAllNamespaces
func (mr *MockServiceCacheMockRecorder) GetAllNamespaces() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllNamespaces", reflect.TypeOf((*MockServiceCache)(nil).GetAllNamespaces))
}

// GetServiceByID mocks base method
func (m *MockServiceCache) GetServiceByID(id string) *model.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByID", id)
	ret0, _ := ret[0].(*model.Service)
	return ret0
}

// GetServiceByID indicates an expected call of GetServiceByID
func (mr *MockServiceCacheMockRecorder) GetServiceByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByID", reflect.TypeOf((*MockServiceCache)(nil).GetServiceByID), id)
}

// GetServiceByName mocks base method
func (m *MockServiceCache) GetServiceByName(name, namespace string) *model.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByName", name, namespace)
	ret0, _ := ret[0].(*model.Service)
	return ret0
}

// GetServiceByName indicates an expected call of GetServiceByName
func (mr *MockServiceCacheMockRecorder) GetServiceByName(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByName", reflect.TypeOf((*MockServiceCache)(nil).GetServiceByName), name, namespace)
}

// IteratorServices mocks base method
func (m *MockServiceCache) IteratorServices(iterProc api.ServiceIterProc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IteratorServices", iterProc)
	ret0, _ := ret[0].(error)
	return ret0
}

// IteratorServices indicates an expected call of IteratorServices
func (mr *MockServiceCacheMockRecorder) IteratorServices(iterProc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IteratorServices", reflect.TypeOf((*MockServiceCache)(nil).IteratorServices), iterProc)
}

// CleanNamespace mocks base method
func (m *MockServiceCache) CleanNamespace(namespace string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CleanNamespace", namespace)
}

// CleanNamespace indicates an expected call of CleanNamespace
func (mr *MockServiceCacheMockRecorder) CleanNamespace(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanNamespace", reflect.TypeOf((*MockServiceCache)(nil).CleanNamespace), namespace)
}

// GetServicesCount mocks base method
func (m *MockServiceCache) GetServicesCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetServicesCount indicates an expected call of GetServicesCount
func (mr *MockServiceCacheMockRecorder) GetServicesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesCount", reflect.TypeOf((*MockServiceCache)(nil).GetServicesCount))
}

// GetServiceByCl5Name mocks base method
func (m *MockServiceCache) GetServiceByCl5Name(cl5Name string) *model.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceByCl5Name", cl5Name)
	ret0, _ := ret[0].(*model.Service)
	return ret0
}

// GetServiceByCl5Name indicates an expected call of GetServiceByCl5Name
func (mr *MockServiceCacheMockRecorder) GetServiceByCl5Name(cl5Name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceByCl5Name", reflect.TypeOf((*MockServiceCache)(nil).GetServiceByCl5Name), cl5Name)
}

// GetServicesByFilter mocks base method
func (m *MockServiceCache) GetServicesByFilter(ctx context.Context, serviceFilters *api.ServiceArgs, instanceFilters *store.InstanceArgs, offset, limit uint32) (uint32, []*model.EnhancedService, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicesByFilter", ctx, serviceFilters, instanceFilters, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.EnhancedService)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetServicesByFilter indicates an expected call of GetServicesByFilter
func (mr *MockServiceCacheMockRecorder) GetServicesByFilter(ctx, serviceFilters, instanceFilters, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicesByFilter", reflect.TypeOf((*MockServiceCache)(nil).GetServicesByFilter), ctx, serviceFilters, instanceFilters, offset, limit)
}

// ListServices mocks base method
func (m *MockServiceCache) ListServices(ctx context.Context, ns string) (string, []*model.Service) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServices", ctx, ns)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]*model.Service)
	return ret0, ret1
}

// ListServices indicates an expected call of ListServices
func (mr *MockServiceCacheMockRecorder) ListServices(ctx, ns interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServices", reflect.TypeOf((*MockServiceCache)(nil).ListServices), ctx, ns)
}

// ListAllServices mocks base method
func (m *MockServiceCache) ListAllServices(ctx context.Context) (string, []*model.Service) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListAllServices", ctx)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].([]*model.Service)
	return ret0, ret1
}

// ListAllServices indicates an expected call of ListAllServices
func (mr *MockServiceCacheMockRecorder) ListAllServices(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAllServices", reflect.TypeOf((*MockServiceCache)(nil).ListAllServices), ctx)
}

// ListServiceAlias mocks base method
func (m *MockServiceCache) ListServiceAlias(namespace, name string) []*model.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListServiceAlias", namespace, name)
	ret0, _ := ret[0].([]*model.Service)
	return ret0
}

// ListServiceAlias indicates an expected call of ListServiceAlias
func (mr *MockServiceCacheMockRecorder) ListServiceAlias(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListServiceAlias", reflect.TypeOf((*MockServiceCache)(nil).ListServiceAlias), namespace, name)
}

// GetAliasFor mocks base method
func (m *MockServiceCache) GetAliasFor(name, namespace string) *model.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAliasFor", name, namespace)
	ret0, _ := ret[0].(*model.Service)
	return ret0
}

// GetAliasFor indicates an expected call of GetAliasFor
func (mr *MockServiceCacheMockRecorder) GetAliasFor(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAliasFor", reflect.TypeOf((*MockServiceCache)(nil).GetAliasFor), name, namespace)
}

// GetRevisionWorker mocks base method
func (m *MockServiceCache) GetRevisionWorker() api.ServiceRevisionWorker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRevisionWorker")
	ret0, _ := ret[0].(api.ServiceRevisionWorker)
	return ret0
}

// GetRevisionWorker indicates an expected call of GetRevisionWorker
func (mr *MockServiceCacheMockRecorder) GetRevisionWorker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRevisionWorker", reflect.TypeOf((*MockServiceCache)(nil).GetRevisionWorker))
}

// GetVisibleSameNameServices mocks base method
func (m *MockServiceCache) GetVisibleSameNameServices(name, namespace string) []*model.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisibleSameNameServices", name, namespace)
	ret0, _ := ret[0].([]*model.Service)
	return ret0
}

// GetVisibleSameNameServices indicates an expected call of GetVisibleSameNameServices
func (mr *MockServiceCacheMockRecorder) GetVisibleSameNameServices(name, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisibleSameNameServices", reflect.TypeOf((*MockServiceCache)(nil).GetVisibleSameNameServices), name, namespace)
}

// GetVisibleServices mocks base method
func (m *MockServiceCache) GetVisibleServices(ctx context.Context, namespace string) []*model.Service {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetVisibleServices", ctx, namespace)
	ret0, _ := ret[0].([]*model.Service)
	return ret0
}

// GetVisibleServices indicates an expected call of GetVisibleServices
func (mr *MockServiceCacheMockRecorder) GetVisibleServices(ctx, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetVisibleServices", reflect.TypeOf((*MockServiceCache)(nil).GetVisibleServices), ctx, namespace)
}

// MockServiceRevisionWorker is a mock of ServiceRevisionWorker interface
type MockServiceRevisionWorker struct {
	ctrl     *gomock.Controller
	recorder *MockServiceRevisionWorkerMockRecorder
}

// MockServiceRevisionWorkerMockRecorder is the mock recorder for MockServiceRevisionWorker
type MockServiceRevisionWorkerMockRecorder struct {
	mock *MockServiceRevisionWorker
}

// NewMockServiceRevisionWorker creates a new mock instance
func NewMockServiceRevisionWorker(ctrl *gomock.Controller) *MockServiceRevisionWorker {
	mock := &MockServiceRevisionWorker{ctrl: ctrl}
	mock.recorder = &MockServiceRevisionWorkerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceRevisionWorker) EXPECT() *MockServiceRevisionWorkerMockRecorder {
	return m.recorder
}

// Notify mocks base method
func (m *MockServiceRevisionWorker) Notify(serviceID string, valid bool) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Notify", serviceID, valid)
}

// Notify indicates an expected call of Notify
func (mr *MockServiceRevisionWorkerMockRecorder) Notify(serviceID, valid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Notify", reflect.TypeOf((*MockServiceRevisionWorker)(nil).Notify), serviceID, valid)
}

// GetServiceRevisionCount mocks base method
func (m *MockServiceRevisionWorker) GetServiceRevisionCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceRevisionCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetServiceRevisionCount indicates an expected call of GetServiceRevisionCount
func (mr *MockServiceRevisionWorkerMockRecorder) GetServiceRevisionCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceRevisionCount", reflect.TypeOf((*MockServiceRevisionWorker)(nil).GetServiceRevisionCount))
}

// GetServiceInstanceRevision mocks base method
func (m *MockServiceRevisionWorker) GetServiceInstanceRevision(serviceID string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServiceInstanceRevision", serviceID)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetServiceInstanceRevision indicates an expected call of GetServiceInstanceRevision
func (mr *MockServiceRevisionWorkerMockRecorder) GetServiceInstanceRevision(serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServiceInstanceRevision", reflect.TypeOf((*MockServiceRevisionWorker)(nil).GetServiceInstanceRevision), serviceID)
}

// MockServiceContractCache is a mock of ServiceContractCache interface
type MockServiceContractCache struct {
	ctrl     *gomock.Controller
	recorder *MockServiceContractCacheMockRecorder
}

// MockServiceContractCacheMockRecorder is the mock recorder for MockServiceContractCache
type MockServiceContractCacheMockRecorder struct {
	mock *MockServiceContractCache
}

// NewMockServiceContractCache creates a new mock instance
func NewMockServiceContractCache(ctrl *gomock.Controller) *MockServiceContractCache {
	mock := &MockServiceContractCache{ctrl: ctrl}
	mock.recorder = &MockServiceContractCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServiceContractCache) EXPECT() *MockServiceContractCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockServiceContractCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockServiceContractCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockServiceContractCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockServiceContractCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockServiceContractCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServiceContractCache)(nil).Update))
}

// Clear mocks base method
func (m *MockServiceContractCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockServiceContractCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockServiceContractCache)(nil).Clear))
}

// Name mocks base method
func (m *MockServiceContractCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockServiceContractCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockServiceContractCache)(nil).Name))
}

// Close mocks base method
func (m *MockServiceContractCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockServiceContractCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockServiceContractCache)(nil).Close))
}

// Get mocks base method
func (m *MockServiceContractCache) Get(ctx context.Context, req *model.ServiceContract) *model.EnrichServiceContract {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, req)
	ret0, _ := ret[0].(*model.EnrichServiceContract)
	return ret0
}

// Get indicates an expected call of Get
func (mr *MockServiceContractCacheMockRecorder) Get(ctx, req interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockServiceContractCache)(nil).Get), ctx, req)
}

// MockInstanceCache is a mock of InstanceCache interface
type MockInstanceCache struct {
	ctrl     *gomock.Controller
	recorder *MockInstanceCacheMockRecorder
}

// MockInstanceCacheMockRecorder is the mock recorder for MockInstanceCache
type MockInstanceCacheMockRecorder struct {
	mock *MockInstanceCache
}

// NewMockInstanceCache creates a new mock instance
func NewMockInstanceCache(ctrl *gomock.Controller) *MockInstanceCache {
	mock := &MockInstanceCache{ctrl: ctrl}
	mock.recorder = &MockInstanceCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockInstanceCache) EXPECT() *MockInstanceCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockInstanceCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockInstanceCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockInstanceCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockInstanceCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockInstanceCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockInstanceCache)(nil).Update))
}

// Clear mocks base method
func (m *MockInstanceCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockInstanceCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockInstanceCache)(nil).Clear))
}

// Name mocks base method
func (m *MockInstanceCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockInstanceCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockInstanceCache)(nil).Name))
}

// Close mocks base method
func (m *MockInstanceCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockInstanceCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockInstanceCache)(nil).Close))
}

// GetInstance mocks base method
func (m *MockInstanceCache) GetInstance(instanceID string) *model.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstance", instanceID)
	ret0, _ := ret[0].(*model.Instance)
	return ret0
}

// GetInstance indicates an expected call of GetInstance
func (mr *MockInstanceCacheMockRecorder) GetInstance(instanceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstance", reflect.TypeOf((*MockInstanceCache)(nil).GetInstance), instanceID)
}

// GetInstancesByServiceID mocks base method
func (m *MockInstanceCache) GetInstancesByServiceID(serviceID string) []*model.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesByServiceID", serviceID)
	ret0, _ := ret[0].([]*model.Instance)
	return ret0
}

// GetInstancesByServiceID indicates an expected call of GetInstancesByServiceID
func (mr *MockInstanceCacheMockRecorder) GetInstancesByServiceID(serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesByServiceID", reflect.TypeOf((*MockInstanceCache)(nil).GetInstancesByServiceID), serviceID)
}

// GetInstances mocks base method
func (m *MockInstanceCache) GetInstances(serviceID string) *model.ServiceInstances {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstances", serviceID)
	ret0, _ := ret[0].(*model.ServiceInstances)
	return ret0
}

// GetInstances indicates an expected call of GetInstances
func (mr *MockInstanceCacheMockRecorder) GetInstances(serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstances", reflect.TypeOf((*MockInstanceCache)(nil).GetInstances), serviceID)
}

// IteratorInstances mocks base method
func (m *MockInstanceCache) IteratorInstances(iterProc api.InstanceIterProc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IteratorInstances", iterProc)
	ret0, _ := ret[0].(error)
	return ret0
}

// IteratorInstances indicates an expected call of IteratorInstances
func (mr *MockInstanceCacheMockRecorder) IteratorInstances(iterProc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IteratorInstances", reflect.TypeOf((*MockInstanceCache)(nil).IteratorInstances), iterProc)
}

// IteratorInstancesWithService mocks base method
func (m *MockInstanceCache) IteratorInstancesWithService(serviceID string, iterProc api.InstanceIterProc) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IteratorInstancesWithService", serviceID, iterProc)
	ret0, _ := ret[0].(error)
	return ret0
}

// IteratorInstancesWithService indicates an expected call of IteratorInstancesWithService
func (mr *MockInstanceCacheMockRecorder) IteratorInstancesWithService(serviceID, iterProc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IteratorInstancesWithService", reflect.TypeOf((*MockInstanceCache)(nil).IteratorInstancesWithService), serviceID, iterProc)
}

// GetInstancesCount mocks base method
func (m *MockInstanceCache) GetInstancesCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetInstancesCount indicates an expected call of GetInstancesCount
func (mr *MockInstanceCacheMockRecorder) GetInstancesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesCount", reflect.TypeOf((*MockInstanceCache)(nil).GetInstancesCount))
}

// GetInstancesCountByServiceID mocks base method
func (m *MockInstanceCache) GetInstancesCountByServiceID(serviceID string) model.InstanceCount {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstancesCountByServiceID", serviceID)
	ret0, _ := ret[0].(model.InstanceCount)
	return ret0
}

// GetInstancesCountByServiceID indicates an expected call of GetInstancesCountByServiceID
func (mr *MockInstanceCacheMockRecorder) GetInstancesCountByServiceID(serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstancesCountByServiceID", reflect.TypeOf((*MockInstanceCache)(nil).GetInstancesCountByServiceID), serviceID)
}

// GetServicePorts mocks base method
func (m *MockInstanceCache) GetServicePorts(serviceID string) []*model.ServicePort {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetServicePorts", serviceID)
	ret0, _ := ret[0].([]*model.ServicePort)
	return ret0
}

// GetServicePorts indicates an expected call of GetServicePorts
func (mr *MockInstanceCacheMockRecorder) GetServicePorts(serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetServicePorts", reflect.TypeOf((*MockInstanceCache)(nil).GetServicePorts), serviceID)
}

// GetInstanceLabels mocks base method
func (m *MockInstanceCache) GetInstanceLabels(serviceID string) *service_manage.InstanceLabels {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetInstanceLabels", serviceID)
	ret0, _ := ret[0].(*service_manage.InstanceLabels)
	return ret0
}

// GetInstanceLabels indicates an expected call of GetInstanceLabels
func (mr *MockInstanceCacheMockRecorder) GetInstanceLabels(serviceID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetInstanceLabels", reflect.TypeOf((*MockInstanceCache)(nil).GetInstanceLabels), serviceID)
}

// QueryInstances mocks base method
func (m *MockInstanceCache) QueryInstances(filter, metaFilter map[string]string, offset, limit uint32) (uint32, []*model.Instance, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryInstances", filter, metaFilter, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.Instance)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryInstances indicates an expected call of QueryInstances
func (mr *MockInstanceCacheMockRecorder) QueryInstances(filter, metaFilter, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryInstances", reflect.TypeOf((*MockInstanceCache)(nil).QueryInstances), filter, metaFilter, offset, limit)
}

// DiscoverServiceInstances mocks base method
func (m *MockInstanceCache) DiscoverServiceInstances(serviceID string, onlyHealthy bool) []*model.Instance {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DiscoverServiceInstances", serviceID, onlyHealthy)
	ret0, _ := ret[0].([]*model.Instance)
	return ret0
}

// DiscoverServiceInstances indicates an expected call of DiscoverServiceInstances
func (mr *MockInstanceCacheMockRecorder) DiscoverServiceInstances(serviceID, onlyHealthy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DiscoverServiceInstances", reflect.TypeOf((*MockInstanceCache)(nil).DiscoverServiceInstances), serviceID, onlyHealthy)
}

// MockFaultDetectCache is a mock of FaultDetectCache interface
type MockFaultDetectCache struct {
	ctrl     *gomock.Controller
	recorder *MockFaultDetectCacheMockRecorder
}

// MockFaultDetectCacheMockRecorder is the mock recorder for MockFaultDetectCache
type MockFaultDetectCacheMockRecorder struct {
	mock *MockFaultDetectCache
}

// NewMockFaultDetectCache creates a new mock instance
func NewMockFaultDetectCache(ctrl *gomock.Controller) *MockFaultDetectCache {
	mock := &MockFaultDetectCache{ctrl: ctrl}
	mock.recorder = &MockFaultDetectCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockFaultDetectCache) EXPECT() *MockFaultDetectCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockFaultDetectCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockFaultDetectCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockFaultDetectCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockFaultDetectCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockFaultDetectCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockFaultDetectCache)(nil).Update))
}

// Clear mocks base method
func (m *MockFaultDetectCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockFaultDetectCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockFaultDetectCache)(nil).Clear))
}

// Name mocks base method
func (m *MockFaultDetectCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockFaultDetectCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockFaultDetectCache)(nil).Name))
}

// Close mocks base method
func (m *MockFaultDetectCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockFaultDetectCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFaultDetectCache)(nil).Close))
}

// Query mocks base method
func (m *MockFaultDetectCache) Query(arg0 context.Context, arg1 *api.FaultDetectArgs) (uint32, []*model.FaultDetectRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.FaultDetectRule)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query
func (mr *MockFaultDetectCacheMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockFaultDetectCache)(nil).Query), arg0, arg1)
}

// GetFaultDetectConfig mocks base method
func (m *MockFaultDetectCache) GetFaultDetectConfig(svcName, namespace string) *model.ServiceWithFaultDetectRules {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFaultDetectConfig", svcName, namespace)
	ret0, _ := ret[0].(*model.ServiceWithFaultDetectRules)
	return ret0
}

// GetFaultDetectConfig indicates an expected call of GetFaultDetectConfig
func (mr *MockFaultDetectCacheMockRecorder) GetFaultDetectConfig(svcName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFaultDetectConfig", reflect.TypeOf((*MockFaultDetectCache)(nil).GetFaultDetectConfig), svcName, namespace)
}

// GetRule mocks base method
func (m *MockFaultDetectCache) GetRule(id string) *model.FaultDetectRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", id)
	ret0, _ := ret[0].(*model.FaultDetectRule)
	return ret0
}

// GetRule indicates an expected call of GetRule
func (mr *MockFaultDetectCacheMockRecorder) GetRule(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockFaultDetectCache)(nil).GetRule), id)
}

// MockLaneCache is a mock of LaneCache interface
type MockLaneCache struct {
	ctrl     *gomock.Controller
	recorder *MockLaneCacheMockRecorder
}

// MockLaneCacheMockRecorder is the mock recorder for MockLaneCache
type MockLaneCacheMockRecorder struct {
	mock *MockLaneCache
}

// NewMockLaneCache creates a new mock instance
func NewMockLaneCache(ctrl *gomock.Controller) *MockLaneCache {
	mock := &MockLaneCache{ctrl: ctrl}
	mock.recorder = &MockLaneCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockLaneCache) EXPECT() *MockLaneCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockLaneCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockLaneCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockLaneCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockLaneCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockLaneCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockLaneCache)(nil).Update))
}

// Clear mocks base method
func (m *MockLaneCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockLaneCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockLaneCache)(nil).Clear))
}

// Name mocks base method
func (m *MockLaneCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockLaneCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockLaneCache)(nil).Name))
}

// Close mocks base method
func (m *MockLaneCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockLaneCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockLaneCache)(nil).Close))
}

// Query mocks base method
func (m *MockLaneCache) Query(arg0 context.Context, arg1 *api.LaneGroupArgs) (uint32, []*model.LaneGroupProto, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.LaneGroupProto)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query
func (mr *MockLaneCacheMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockLaneCache)(nil).Query), arg0, arg1)
}

// GetLaneRules mocks base method
func (m *MockLaneCache) GetLaneRules(serviceKey *model.Service) ([]*model.LaneGroupProto, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLaneRules", serviceKey)
	ret0, _ := ret[0].([]*model.LaneGroupProto)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetLaneRules indicates an expected call of GetLaneRules
func (mr *MockLaneCacheMockRecorder) GetLaneRules(serviceKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLaneRules", reflect.TypeOf((*MockLaneCache)(nil).GetLaneRules), serviceKey)
}

// GetRule mocks base method
func (m *MockLaneCache) GetRule(id string) *model.LaneGroup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", id)
	ret0, _ := ret[0].(*model.LaneGroup)
	return ret0
}

// GetRule indicates an expected call of GetRule
func (mr *MockLaneCacheMockRecorder) GetRule(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockLaneCache)(nil).GetRule), id)
}

// MockRoutingConfigCache is a mock of RoutingConfigCache interface
type MockRoutingConfigCache struct {
	ctrl     *gomock.Controller
	recorder *MockRoutingConfigCacheMockRecorder
}

// MockRoutingConfigCacheMockRecorder is the mock recorder for MockRoutingConfigCache
type MockRoutingConfigCacheMockRecorder struct {
	mock *MockRoutingConfigCache
}

// NewMockRoutingConfigCache creates a new mock instance
func NewMockRoutingConfigCache(ctrl *gomock.Controller) *MockRoutingConfigCache {
	mock := &MockRoutingConfigCache{ctrl: ctrl}
	mock.recorder = &MockRoutingConfigCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoutingConfigCache) EXPECT() *MockRoutingConfigCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockRoutingConfigCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockRoutingConfigCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockRoutingConfigCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockRoutingConfigCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRoutingConfigCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoutingConfigCache)(nil).Update))
}

// Clear mocks base method
func (m *MockRoutingConfigCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockRoutingConfigCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockRoutingConfigCache)(nil).Clear))
}

// Name mocks base method
func (m *MockRoutingConfigCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockRoutingConfigCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRoutingConfigCache)(nil).Name))
}

// Close mocks base method
func (m *MockRoutingConfigCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRoutingConfigCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRoutingConfigCache)(nil).Close))
}

// GetRouterConfig mocks base method
func (m *MockRoutingConfigCache) GetRouterConfig(id, service, namespace string) (*traffic_manage.Routing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterConfig", id, service, namespace)
	ret0, _ := ret[0].(*traffic_manage.Routing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterConfig indicates an expected call of GetRouterConfig
func (mr *MockRoutingConfigCacheMockRecorder) GetRouterConfig(id, service, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterConfig", reflect.TypeOf((*MockRoutingConfigCache)(nil).GetRouterConfig), id, service, namespace)
}

// GetRouterConfigV2 mocks base method
func (m *MockRoutingConfigCache) GetRouterConfigV2(id, service, namespace string) (*traffic_manage.Routing, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouterConfigV2", id, service, namespace)
	ret0, _ := ret[0].(*traffic_manage.Routing)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRouterConfigV2 indicates an expected call of GetRouterConfigV2
func (mr *MockRoutingConfigCacheMockRecorder) GetRouterConfigV2(id, service, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouterConfigV2", reflect.TypeOf((*MockRoutingConfigCache)(nil).GetRouterConfigV2), id, service, namespace)
}

// GetNearbyRouteRule mocks base method
func (m *MockRoutingConfigCache) GetNearbyRouteRule(service, namespace string) ([]*traffic_manage.RouteRule, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNearbyRouteRule", service, namespace)
	ret0, _ := ret[0].([]*traffic_manage.RouteRule)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetNearbyRouteRule indicates an expected call of GetNearbyRouteRule
func (mr *MockRoutingConfigCacheMockRecorder) GetNearbyRouteRule(service, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNearbyRouteRule", reflect.TypeOf((*MockRoutingConfigCache)(nil).GetNearbyRouteRule), service, namespace)
}

// GetRoutingConfigCount mocks base method
func (m *MockRoutingConfigCache) GetRoutingConfigCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRoutingConfigCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRoutingConfigCount indicates an expected call of GetRoutingConfigCount
func (mr *MockRoutingConfigCacheMockRecorder) GetRoutingConfigCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRoutingConfigCount", reflect.TypeOf((*MockRoutingConfigCache)(nil).GetRoutingConfigCount))
}

// QueryRoutingConfigsV2 mocks base method
func (m *MockRoutingConfigCache) QueryRoutingConfigsV2(arg0 context.Context, arg1 *api.RoutingArgs) (uint32, []*model.ExtendRouterConfig, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRoutingConfigsV2", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.ExtendRouterConfig)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryRoutingConfigsV2 indicates an expected call of QueryRoutingConfigsV2
func (mr *MockRoutingConfigCacheMockRecorder) QueryRoutingConfigsV2(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRoutingConfigsV2", reflect.TypeOf((*MockRoutingConfigCache)(nil).QueryRoutingConfigsV2), arg0, arg1)
}

// ListRouterRule mocks base method
func (m *MockRoutingConfigCache) ListRouterRule(service, namespace string) []*model.ExtendRouterConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRouterRule", service, namespace)
	ret0, _ := ret[0].([]*model.ExtendRouterConfig)
	return ret0
}

// ListRouterRule indicates an expected call of ListRouterRule
func (mr *MockRoutingConfigCacheMockRecorder) ListRouterRule(service, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRouterRule", reflect.TypeOf((*MockRoutingConfigCache)(nil).ListRouterRule), service, namespace)
}

// IsConvertFromV1 mocks base method
func (m *MockRoutingConfigCache) IsConvertFromV1(id string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsConvertFromV1", id)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// IsConvertFromV1 indicates an expected call of IsConvertFromV1
func (mr *MockRoutingConfigCacheMockRecorder) IsConvertFromV1(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConvertFromV1", reflect.TypeOf((*MockRoutingConfigCache)(nil).IsConvertFromV1), id)
}

// IteratorRouterRule mocks base method
func (m *MockRoutingConfigCache) IteratorRouterRule(iterProc api.RouterRuleIterProc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IteratorRouterRule", iterProc)
}

// IteratorRouterRule indicates an expected call of IteratorRouterRule
func (mr *MockRoutingConfigCacheMockRecorder) IteratorRouterRule(iterProc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IteratorRouterRule", reflect.TypeOf((*MockRoutingConfigCache)(nil).IteratorRouterRule), iterProc)
}

// GetRule mocks base method
func (m *MockRoutingConfigCache) GetRule(id string) *model.ExtendRouterConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", id)
	ret0, _ := ret[0].(*model.ExtendRouterConfig)
	return ret0
}

// GetRule indicates an expected call of GetRule
func (mr *MockRoutingConfigCacheMockRecorder) GetRule(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockRoutingConfigCache)(nil).GetRule), id)
}

// MockRateLimitCache is a mock of RateLimitCache interface
type MockRateLimitCache struct {
	ctrl     *gomock.Controller
	recorder *MockRateLimitCacheMockRecorder
}

// MockRateLimitCacheMockRecorder is the mock recorder for MockRateLimitCache
type MockRateLimitCacheMockRecorder struct {
	mock *MockRateLimitCache
}

// NewMockRateLimitCache creates a new mock instance
func NewMockRateLimitCache(ctrl *gomock.Controller) *MockRateLimitCache {
	mock := &MockRateLimitCache{ctrl: ctrl}
	mock.recorder = &MockRateLimitCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRateLimitCache) EXPECT() *MockRateLimitCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockRateLimitCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockRateLimitCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockRateLimitCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockRateLimitCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRateLimitCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRateLimitCache)(nil).Update))
}

// Clear mocks base method
func (m *MockRateLimitCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockRateLimitCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockRateLimitCache)(nil).Clear))
}

// Name mocks base method
func (m *MockRateLimitCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockRateLimitCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRateLimitCache)(nil).Name))
}

// Close mocks base method
func (m *MockRateLimitCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRateLimitCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRateLimitCache)(nil).Close))
}

// IteratorRateLimit mocks base method
func (m *MockRateLimitCache) IteratorRateLimit(rateLimitIterProc api.RateLimitIterProc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IteratorRateLimit", rateLimitIterProc)
}

// IteratorRateLimit indicates an expected call of IteratorRateLimit
func (mr *MockRateLimitCacheMockRecorder) IteratorRateLimit(rateLimitIterProc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IteratorRateLimit", reflect.TypeOf((*MockRateLimitCache)(nil).IteratorRateLimit), rateLimitIterProc)
}

// GetRateLimitRules mocks base method
func (m *MockRateLimitCache) GetRateLimitRules(serviceKey model.ServiceKey) ([]*model.RateLimit, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimitRules", serviceKey)
	ret0, _ := ret[0].([]*model.RateLimit)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetRateLimitRules indicates an expected call of GetRateLimitRules
func (mr *MockRateLimitCacheMockRecorder) GetRateLimitRules(serviceKey interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimitRules", reflect.TypeOf((*MockRateLimitCache)(nil).GetRateLimitRules), serviceKey)
}

// QueryRateLimitRules mocks base method
func (m *MockRateLimitCache) QueryRateLimitRules(arg0 context.Context, arg1 api.RateLimitRuleArgs) (uint32, []*model.RateLimit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryRateLimitRules", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.RateLimit)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryRateLimitRules indicates an expected call of QueryRateLimitRules
func (mr *MockRateLimitCacheMockRecorder) QueryRateLimitRules(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryRateLimitRules", reflect.TypeOf((*MockRateLimitCache)(nil).QueryRateLimitRules), arg0, arg1)
}

// GetRateLimitsCount mocks base method
func (m *MockRateLimitCache) GetRateLimitsCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRateLimitsCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetRateLimitsCount indicates an expected call of GetRateLimitsCount
func (mr *MockRateLimitCacheMockRecorder) GetRateLimitsCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRateLimitsCount", reflect.TypeOf((*MockRateLimitCache)(nil).GetRateLimitsCount))
}

// GetRule mocks base method
func (m *MockRateLimitCache) GetRule(id string) *model.RateLimit {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", id)
	ret0, _ := ret[0].(*model.RateLimit)
	return ret0
}

// GetRule indicates an expected call of GetRule
func (mr *MockRateLimitCacheMockRecorder) GetRule(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockRateLimitCache)(nil).GetRule), id)
}

// MockL5Cache is a mock of L5Cache interface
type MockL5Cache struct {
	ctrl     *gomock.Controller
	recorder *MockL5CacheMockRecorder
}

// MockL5CacheMockRecorder is the mock recorder for MockL5Cache
type MockL5CacheMockRecorder struct {
	mock *MockL5Cache
}

// NewMockL5Cache creates a new mock instance
func NewMockL5Cache(ctrl *gomock.Controller) *MockL5Cache {
	mock := &MockL5Cache{ctrl: ctrl}
	mock.recorder = &MockL5CacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockL5Cache) EXPECT() *MockL5CacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockL5Cache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockL5CacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockL5Cache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockL5Cache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockL5CacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockL5Cache)(nil).Update))
}

// Clear mocks base method
func (m *MockL5Cache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockL5CacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockL5Cache)(nil).Clear))
}

// Name mocks base method
func (m *MockL5Cache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockL5CacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockL5Cache)(nil).Name))
}

// Close mocks base method
func (m *MockL5Cache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockL5CacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockL5Cache)(nil).Close))
}

// GetRouteByIP mocks base method
func (m *MockL5Cache) GetRouteByIP(ip uint32) []*model.Route {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRouteByIP", ip)
	ret0, _ := ret[0].([]*model.Route)
	return ret0
}

// GetRouteByIP indicates an expected call of GetRouteByIP
func (mr *MockL5CacheMockRecorder) GetRouteByIP(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRouteByIP", reflect.TypeOf((*MockL5Cache)(nil).GetRouteByIP), ip)
}

// CheckRouteExisted mocks base method
func (m *MockL5Cache) CheckRouteExisted(ip, modID, cmdID uint32) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckRouteExisted", ip, modID, cmdID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckRouteExisted indicates an expected call of CheckRouteExisted
func (mr *MockL5CacheMockRecorder) CheckRouteExisted(ip, modID, cmdID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckRouteExisted", reflect.TypeOf((*MockL5Cache)(nil).CheckRouteExisted), ip, modID, cmdID)
}

// GetPolicy mocks base method
func (m *MockL5Cache) GetPolicy(modID uint32) *model.Policy {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicy", modID)
	ret0, _ := ret[0].(*model.Policy)
	return ret0
}

// GetPolicy indicates an expected call of GetPolicy
func (mr *MockL5CacheMockRecorder) GetPolicy(modID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicy", reflect.TypeOf((*MockL5Cache)(nil).GetPolicy), modID)
}

// GetSection mocks base method
func (m *MockL5Cache) GetSection(modeID uint32) []*model.Section {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSection", modeID)
	ret0, _ := ret[0].([]*model.Section)
	return ret0
}

// GetSection indicates an expected call of GetSection
func (mr *MockL5CacheMockRecorder) GetSection(modeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSection", reflect.TypeOf((*MockL5Cache)(nil).GetSection), modeID)
}

// GetIPConfig mocks base method
func (m *MockL5Cache) GetIPConfig(ip uint32) *model.IPConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetIPConfig", ip)
	ret0, _ := ret[0].(*model.IPConfig)
	return ret0
}

// GetIPConfig indicates an expected call of GetIPConfig
func (mr *MockL5CacheMockRecorder) GetIPConfig(ip interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIPConfig", reflect.TypeOf((*MockL5Cache)(nil).GetIPConfig), ip)
}

// MockCircuitBreakerCache is a mock of CircuitBreakerCache interface
type MockCircuitBreakerCache struct {
	ctrl     *gomock.Controller
	recorder *MockCircuitBreakerCacheMockRecorder
}

// MockCircuitBreakerCacheMockRecorder is the mock recorder for MockCircuitBreakerCache
type MockCircuitBreakerCacheMockRecorder struct {
	mock *MockCircuitBreakerCache
}

// NewMockCircuitBreakerCache creates a new mock instance
func NewMockCircuitBreakerCache(ctrl *gomock.Controller) *MockCircuitBreakerCache {
	mock := &MockCircuitBreakerCache{ctrl: ctrl}
	mock.recorder = &MockCircuitBreakerCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockCircuitBreakerCache) EXPECT() *MockCircuitBreakerCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockCircuitBreakerCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockCircuitBreakerCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockCircuitBreakerCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockCircuitBreakerCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockCircuitBreakerCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCircuitBreakerCache)(nil).Update))
}

// Clear mocks base method
func (m *MockCircuitBreakerCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockCircuitBreakerCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockCircuitBreakerCache)(nil).Clear))
}

// Name mocks base method
func (m *MockCircuitBreakerCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockCircuitBreakerCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockCircuitBreakerCache)(nil).Name))
}

// Close mocks base method
func (m *MockCircuitBreakerCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockCircuitBreakerCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockCircuitBreakerCache)(nil).Close))
}

// Query mocks base method
func (m *MockCircuitBreakerCache) Query(arg0 context.Context, arg1 *api.CircuitBreakerRuleArgs) (uint32, []*model.CircuitBreakerRule, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.CircuitBreakerRule)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query
func (mr *MockCircuitBreakerCacheMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockCircuitBreakerCache)(nil).Query), arg0, arg1)
}

// GetCircuitBreakerConfig mocks base method
func (m *MockCircuitBreakerCache) GetCircuitBreakerConfig(svcName, namespace string) *model.ServiceWithCircuitBreakerRules {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCircuitBreakerConfig", svcName, namespace)
	ret0, _ := ret[0].(*model.ServiceWithCircuitBreakerRules)
	return ret0
}

// GetCircuitBreakerConfig indicates an expected call of GetCircuitBreakerConfig
func (mr *MockCircuitBreakerCacheMockRecorder) GetCircuitBreakerConfig(svcName, namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCircuitBreakerConfig", reflect.TypeOf((*MockCircuitBreakerCache)(nil).GetCircuitBreakerConfig), svcName, namespace)
}

// GetRule mocks base method
func (m *MockCircuitBreakerCache) GetRule(id string) *model.CircuitBreakerRule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRule", id)
	ret0, _ := ret[0].(*model.CircuitBreakerRule)
	return ret0
}

// GetRule indicates an expected call of GetRule
func (mr *MockCircuitBreakerCacheMockRecorder) GetRule(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRule", reflect.TypeOf((*MockCircuitBreakerCache)(nil).GetRule), id)
}

// MockConfigGroupCache is a mock of ConfigGroupCache interface
type MockConfigGroupCache struct {
	ctrl     *gomock.Controller
	recorder *MockConfigGroupCacheMockRecorder
}

// MockConfigGroupCacheMockRecorder is the mock recorder for MockConfigGroupCache
type MockConfigGroupCacheMockRecorder struct {
	mock *MockConfigGroupCache
}

// NewMockConfigGroupCache creates a new mock instance
func NewMockConfigGroupCache(ctrl *gomock.Controller) *MockConfigGroupCache {
	mock := &MockConfigGroupCache{ctrl: ctrl}
	mock.recorder = &MockConfigGroupCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigGroupCache) EXPECT() *MockConfigGroupCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockConfigGroupCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockConfigGroupCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockConfigGroupCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockConfigGroupCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockConfigGroupCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockConfigGroupCache)(nil).Update))
}

// Clear mocks base method
func (m *MockConfigGroupCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockConfigGroupCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockConfigGroupCache)(nil).Clear))
}

// Name mocks base method
func (m *MockConfigGroupCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockConfigGroupCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockConfigGroupCache)(nil).Name))
}

// Close mocks base method
func (m *MockConfigGroupCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConfigGroupCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConfigGroupCache)(nil).Close))
}

// GetGroupByName mocks base method
func (m *MockConfigGroupCache) GetGroupByName(namespace, name string) *model.ConfigFileGroup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByName", namespace, name)
	ret0, _ := ret[0].(*model.ConfigFileGroup)
	return ret0
}

// GetGroupByName indicates an expected call of GetGroupByName
func (mr *MockConfigGroupCacheMockRecorder) GetGroupByName(namespace, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByName", reflect.TypeOf((*MockConfigGroupCache)(nil).GetGroupByName), namespace, name)
}

// GetGroupByID mocks base method
func (m *MockConfigGroupCache) GetGroupByID(id uint64) *model.ConfigFileGroup {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupByID", id)
	ret0, _ := ret[0].(*model.ConfigFileGroup)
	return ret0
}

// GetGroupByID indicates an expected call of GetGroupByID
func (mr *MockConfigGroupCacheMockRecorder) GetGroupByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupByID", reflect.TypeOf((*MockConfigGroupCache)(nil).GetGroupByID), id)
}

// ListGroups mocks base method
func (m *MockConfigGroupCache) ListGroups(namespace string) ([]*model.ConfigFileGroup, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGroups", namespace)
	ret0, _ := ret[0].([]*model.ConfigFileGroup)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// ListGroups indicates an expected call of ListGroups
func (mr *MockConfigGroupCacheMockRecorder) ListGroups(namespace interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGroups", reflect.TypeOf((*MockConfigGroupCache)(nil).ListGroups), namespace)
}

// Query mocks base method
func (m *MockConfigGroupCache) Query(args *api.ConfigGroupArgs) (uint32, []*model.ConfigFileGroup, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", args)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.ConfigFileGroup)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query
func (mr *MockConfigGroupCacheMockRecorder) Query(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockConfigGroupCache)(nil).Query), args)
}

// MockConfigFileCache is a mock of ConfigFileCache interface
type MockConfigFileCache struct {
	ctrl     *gomock.Controller
	recorder *MockConfigFileCacheMockRecorder
}

// MockConfigFileCacheMockRecorder is the mock recorder for MockConfigFileCache
type MockConfigFileCacheMockRecorder struct {
	mock *MockConfigFileCache
}

// NewMockConfigFileCache creates a new mock instance
func NewMockConfigFileCache(ctrl *gomock.Controller) *MockConfigFileCache {
	mock := &MockConfigFileCache{ctrl: ctrl}
	mock.recorder = &MockConfigFileCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConfigFileCache) EXPECT() *MockConfigFileCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockConfigFileCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockConfigFileCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockConfigFileCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockConfigFileCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockConfigFileCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockConfigFileCache)(nil).Update))
}

// Clear mocks base method
func (m *MockConfigFileCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockConfigFileCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockConfigFileCache)(nil).Clear))
}

// Name mocks base method
func (m *MockConfigFileCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockConfigFileCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockConfigFileCache)(nil).Name))
}

// Close mocks base method
func (m *MockConfigFileCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockConfigFileCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockConfigFileCache)(nil).Close))
}

// GetGroupActiveReleases mocks base method
func (m *MockConfigFileCache) GetGroupActiveReleases(namespace, group string) ([]*model.ConfigFileRelease, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroupActiveReleases", namespace, group)
	ret0, _ := ret[0].([]*model.ConfigFileRelease)
	ret1, _ := ret[1].(string)
	return ret0, ret1
}

// GetGroupActiveReleases indicates an expected call of GetGroupActiveReleases
func (mr *MockConfigFileCacheMockRecorder) GetGroupActiveReleases(namespace, group interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroupActiveReleases", reflect.TypeOf((*MockConfigFileCache)(nil).GetGroupActiveReleases), namespace, group)
}

// GetActiveRelease mocks base method
func (m *MockConfigFileCache) GetActiveRelease(namespace, group, fileName string) *model.ConfigFileRelease {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveRelease", namespace, group, fileName)
	ret0, _ := ret[0].(*model.ConfigFileRelease)
	return ret0
}

// GetActiveRelease indicates an expected call of GetActiveRelease
func (mr *MockConfigFileCacheMockRecorder) GetActiveRelease(namespace, group, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveRelease", reflect.TypeOf((*MockConfigFileCache)(nil).GetActiveRelease), namespace, group, fileName)
}

// GetActiveGrayRelease mocks base method
func (m *MockConfigFileCache) GetActiveGrayRelease(namespace, group, fileName string) *model.ConfigFileRelease {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveGrayRelease", namespace, group, fileName)
	ret0, _ := ret[0].(*model.ConfigFileRelease)
	return ret0
}

// GetActiveGrayRelease indicates an expected call of GetActiveGrayRelease
func (mr *MockConfigFileCacheMockRecorder) GetActiveGrayRelease(namespace, group, fileName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveGrayRelease", reflect.TypeOf((*MockConfigFileCache)(nil).GetActiveGrayRelease), namespace, group, fileName)
}

// GetRelease mocks base method
func (m *MockConfigFileCache) GetRelease(key model.ConfigFileReleaseKey) *model.ConfigFileRelease {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRelease", key)
	ret0, _ := ret[0].(*model.ConfigFileRelease)
	return ret0
}

// GetRelease indicates an expected call of GetRelease
func (mr *MockConfigFileCacheMockRecorder) GetRelease(key interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRelease", reflect.TypeOf((*MockConfigFileCache)(nil).GetRelease), key)
}

// QueryReleases mocks base method
func (m *MockConfigFileCache) QueryReleases(args *api.ConfigReleaseArgs) (uint32, []*model.SimpleConfigFileRelease, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryReleases", args)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.SimpleConfigFileRelease)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryReleases indicates an expected call of QueryReleases
func (mr *MockConfigFileCacheMockRecorder) QueryReleases(args interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryReleases", reflect.TypeOf((*MockConfigFileCache)(nil).QueryReleases), args)
}

// MockUserCache is a mock of UserCache interface
type MockUserCache struct {
	ctrl     *gomock.Controller
	recorder *MockUserCacheMockRecorder
}

// MockUserCacheMockRecorder is the mock recorder for MockUserCache
type MockUserCacheMockRecorder struct {
	mock *MockUserCache
}

// NewMockUserCache creates a new mock instance
func NewMockUserCache(ctrl *gomock.Controller) *MockUserCache {
	mock := &MockUserCache{ctrl: ctrl}
	mock.recorder = &MockUserCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserCache) EXPECT() *MockUserCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockUserCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockUserCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockUserCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockUserCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserCache)(nil).Update))
}

// Clear mocks base method
func (m *MockUserCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockUserCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockUserCache)(nil).Clear))
}

// Name mocks base method
func (m *MockUserCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockUserCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockUserCache)(nil).Name))
}

// Close mocks base method
func (m *MockUserCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockUserCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUserCache)(nil).Close))
}

// GetAdmin mocks base method
func (m *MockUserCache) GetAdmin() *auth.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAdmin")
	ret0, _ := ret[0].(*auth.User)
	return ret0
}

// GetAdmin indicates an expected call of GetAdmin
func (mr *MockUserCacheMockRecorder) GetAdmin() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAdmin", reflect.TypeOf((*MockUserCache)(nil).GetAdmin))
}

// GetUserByID mocks base method
func (m *MockUserCache) GetUserByID(id string) *auth.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByID", id)
	ret0, _ := ret[0].(*auth.User)
	return ret0
}

// GetUserByID indicates an expected call of GetUserByID
func (mr *MockUserCacheMockRecorder) GetUserByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByID", reflect.TypeOf((*MockUserCache)(nil).GetUserByID), id)
}

// GetUserByName mocks base method
func (m *MockUserCache) GetUserByName(name, ownerName string) *auth.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByName", name, ownerName)
	ret0, _ := ret[0].(*auth.User)
	return ret0
}

// GetUserByName indicates an expected call of GetUserByName
func (mr *MockUserCacheMockRecorder) GetUserByName(name, ownerName interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByName", reflect.TypeOf((*MockUserCache)(nil).GetUserByName), name, ownerName)
}

// GetGroup mocks base method
func (m *MockUserCache) GetGroup(id string) *auth.UserGroupDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGroup", id)
	ret0, _ := ret[0].(*auth.UserGroupDetail)
	return ret0
}

// GetGroup indicates an expected call of GetGroup
func (mr *MockUserCacheMockRecorder) GetGroup(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGroup", reflect.TypeOf((*MockUserCache)(nil).GetGroup), id)
}

// IsUserInGroup mocks base method
func (m *MockUserCache) IsUserInGroup(userId, groupId string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsUserInGroup", userId, groupId)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsUserInGroup indicates an expected call of IsUserInGroup
func (mr *MockUserCacheMockRecorder) IsUserInGroup(userId, groupId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsUserInGroup", reflect.TypeOf((*MockUserCache)(nil).IsUserInGroup), userId, groupId)
}

// IsOwner mocks base method
func (m *MockUserCache) IsOwner(id string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsOwner", id)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsOwner indicates an expected call of IsOwner
func (mr *MockUserCacheMockRecorder) IsOwner(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsOwner", reflect.TypeOf((*MockUserCache)(nil).IsOwner), id)
}

// GetUserLinkGroupIds mocks base method
func (m *MockUserCache) GetUserLinkGroupIds(id string) []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserLinkGroupIds", id)
	ret0, _ := ret[0].([]string)
	return ret0
}

// GetUserLinkGroupIds indicates an expected call of GetUserLinkGroupIds
func (mr *MockUserCacheMockRecorder) GetUserLinkGroupIds(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserLinkGroupIds", reflect.TypeOf((*MockUserCache)(nil).GetUserLinkGroupIds), id)
}

// QueryUsers mocks base method
func (m *MockUserCache) QueryUsers(arg0 context.Context, arg1 api.UserSearchArgs) (uint32, []*auth.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUsers", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*auth.User)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryUsers indicates an expected call of QueryUsers
func (mr *MockUserCacheMockRecorder) QueryUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUsers", reflect.TypeOf((*MockUserCache)(nil).QueryUsers), arg0, arg1)
}

// QueryUserGroups mocks base method
func (m *MockUserCache) QueryUserGroups(arg0 context.Context, arg1 api.UserGroupSearchArgs) (uint32, []*auth.UserGroupDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "QueryUserGroups", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*auth.UserGroupDetail)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// QueryUserGroups indicates an expected call of QueryUserGroups
func (mr *MockUserCacheMockRecorder) QueryUserGroups(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "QueryUserGroups", reflect.TypeOf((*MockUserCache)(nil).QueryUserGroups), arg0, arg1)
}

// MockStrategyCache is a mock of StrategyCache interface
type MockStrategyCache struct {
	ctrl     *gomock.Controller
	recorder *MockStrategyCacheMockRecorder
}

// MockStrategyCacheMockRecorder is the mock recorder for MockStrategyCache
type MockStrategyCacheMockRecorder struct {
	mock *MockStrategyCache
}

// NewMockStrategyCache creates a new mock instance
func NewMockStrategyCache(ctrl *gomock.Controller) *MockStrategyCache {
	mock := &MockStrategyCache{ctrl: ctrl}
	mock.recorder = &MockStrategyCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockStrategyCache) EXPECT() *MockStrategyCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockStrategyCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockStrategyCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockStrategyCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockStrategyCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockStrategyCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockStrategyCache)(nil).Update))
}

// Clear mocks base method
func (m *MockStrategyCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockStrategyCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockStrategyCache)(nil).Clear))
}

// Name mocks base method
func (m *MockStrategyCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockStrategyCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockStrategyCache)(nil).Name))
}

// Close mocks base method
func (m *MockStrategyCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockStrategyCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockStrategyCache)(nil).Close))
}

// GetPolicyRule mocks base method
func (m *MockStrategyCache) GetPolicyRule(id string) *auth.StrategyDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPolicyRule", id)
	ret0, _ := ret[0].(*auth.StrategyDetail)
	return ret0
}

// GetPolicyRule indicates an expected call of GetPolicyRule
func (mr *MockStrategyCacheMockRecorder) GetPolicyRule(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPolicyRule", reflect.TypeOf((*MockStrategyCache)(nil).GetPolicyRule), id)
}

// GetPrincipalPolicies mocks base method
func (m *MockStrategyCache) GetPrincipalPolicies(effect string, p auth.Principal) []*auth.StrategyDetail {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrincipalPolicies", effect, p)
	ret0, _ := ret[0].([]*auth.StrategyDetail)
	return ret0
}

// GetPrincipalPolicies indicates an expected call of GetPrincipalPolicies
func (mr *MockStrategyCacheMockRecorder) GetPrincipalPolicies(effect, p interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrincipalPolicies", reflect.TypeOf((*MockStrategyCache)(nil).GetPrincipalPolicies), effect, p)
}

// Hint mocks base method
func (m *MockStrategyCache) Hint(ctx context.Context, p auth.Principal, r *auth.ResourceEntry) security.AuthAction {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Hint", ctx, p, r)
	ret0, _ := ret[0].(security.AuthAction)
	return ret0
}

// Hint indicates an expected call of Hint
func (mr *MockStrategyCacheMockRecorder) Hint(ctx, p, r interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Hint", reflect.TypeOf((*MockStrategyCache)(nil).Hint), ctx, p, r)
}

// Query mocks base method
func (m *MockStrategyCache) Query(arg0 context.Context, arg1 api.PolicySearchArgs) (uint32, []*auth.StrategyDetail, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*auth.StrategyDetail)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query
func (mr *MockStrategyCacheMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockStrategyCache)(nil).Query), arg0, arg1)
}

// MockRoleCache is a mock of RoleCache interface
type MockRoleCache struct {
	ctrl     *gomock.Controller
	recorder *MockRoleCacheMockRecorder
}

// MockRoleCacheMockRecorder is the mock recorder for MockRoleCache
type MockRoleCacheMockRecorder struct {
	mock *MockRoleCache
}

// NewMockRoleCache creates a new mock instance
func NewMockRoleCache(ctrl *gomock.Controller) *MockRoleCache {
	mock := &MockRoleCache{ctrl: ctrl}
	mock.recorder = &MockRoleCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRoleCache) EXPECT() *MockRoleCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockRoleCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockRoleCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockRoleCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockRoleCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRoleCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRoleCache)(nil).Update))
}

// Clear mocks base method
func (m *MockRoleCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockRoleCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockRoleCache)(nil).Clear))
}

// Name mocks base method
func (m *MockRoleCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockRoleCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockRoleCache)(nil).Name))
}

// Close mocks base method
func (m *MockRoleCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockRoleCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockRoleCache)(nil).Close))
}

// GetRole mocks base method
func (m *MockRoleCache) GetRole(id string) *auth.Role {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRole", id)
	ret0, _ := ret[0].(*auth.Role)
	return ret0
}

// GetRole indicates an expected call of GetRole
func (mr *MockRoleCacheMockRecorder) GetRole(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRole", reflect.TypeOf((*MockRoleCache)(nil).GetRole), id)
}

// Query mocks base method
func (m *MockRoleCache) Query(arg0 context.Context, arg1 api.RoleSearchArgs) (uint32, []*auth.Role, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Query", arg0, arg1)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*auth.Role)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Query indicates an expected call of Query
func (mr *MockRoleCacheMockRecorder) Query(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Query", reflect.TypeOf((*MockRoleCache)(nil).Query), arg0, arg1)
}

// GetPrincipalRoles mocks base method
func (m *MockRoleCache) GetPrincipalRoles(arg0 auth.Principal) []*auth.Role {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPrincipalRoles", arg0)
	ret0, _ := ret[0].([]*auth.Role)
	return ret0
}

// GetPrincipalRoles indicates an expected call of GetPrincipalRoles
func (mr *MockRoleCacheMockRecorder) GetPrincipalRoles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPrincipalRoles", reflect.TypeOf((*MockRoleCache)(nil).GetPrincipalRoles), arg0)
}

// MockClientCache is a mock of ClientCache interface
type MockClientCache struct {
	ctrl     *gomock.Controller
	recorder *MockClientCacheMockRecorder
}

// MockClientCacheMockRecorder is the mock recorder for MockClientCache
type MockClientCacheMockRecorder struct {
	mock *MockClientCache
}

// NewMockClientCache creates a new mock instance
func NewMockClientCache(ctrl *gomock.Controller) *MockClientCache {
	mock := &MockClientCache{ctrl: ctrl}
	mock.recorder = &MockClientCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockClientCache) EXPECT() *MockClientCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockClientCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockClientCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockClientCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockClientCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockClientCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockClientCache)(nil).Update))
}

// Clear mocks base method
func (m *MockClientCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockClientCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockClientCache)(nil).Clear))
}

// Name mocks base method
func (m *MockClientCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockClientCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockClientCache)(nil).Name))
}

// Close mocks base method
func (m *MockClientCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockClientCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockClientCache)(nil).Close))
}

// GetClient mocks base method
func (m *MockClientCache) GetClient(id string) *model.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClient", id)
	ret0, _ := ret[0].(*model.Client)
	return ret0
}

// GetClient indicates an expected call of GetClient
func (mr *MockClientCacheMockRecorder) GetClient(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClient", reflect.TypeOf((*MockClientCache)(nil).GetClient), id)
}

// IteratorClients mocks base method
func (m *MockClientCache) IteratorClients(iterProc api.ClientIterProc) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IteratorClients", iterProc)
}

// IteratorClients indicates an expected call of IteratorClients
func (mr *MockClientCacheMockRecorder) IteratorClients(iterProc interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IteratorClients", reflect.TypeOf((*MockClientCache)(nil).IteratorClients), iterProc)
}

// GetClientsByFilter mocks base method
func (m *MockClientCache) GetClientsByFilter(filters map[string]string, offset, limit uint32) (uint32, []*model.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClientsByFilter", filters, offset, limit)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].([]*model.Client)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// GetClientsByFilter indicates an expected call of GetClientsByFilter
func (mr *MockClientCacheMockRecorder) GetClientsByFilter(filters, offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClientsByFilter", reflect.TypeOf((*MockClientCache)(nil).GetClientsByFilter), filters, offset, limit)
}

// MockGrayCache is a mock of GrayCache interface
type MockGrayCache struct {
	ctrl     *gomock.Controller
	recorder *MockGrayCacheMockRecorder
}

// MockGrayCacheMockRecorder is the mock recorder for MockGrayCache
type MockGrayCacheMockRecorder struct {
	mock *MockGrayCache
}

// NewMockGrayCache creates a new mock instance
func NewMockGrayCache(ctrl *gomock.Controller) *MockGrayCache {
	mock := &MockGrayCache{ctrl: ctrl}
	mock.recorder = &MockGrayCacheMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockGrayCache) EXPECT() *MockGrayCacheMockRecorder {
	return m.recorder
}

// Initialize mocks base method
func (m *MockGrayCache) Initialize(c map[string]interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", c)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize
func (mr *MockGrayCacheMockRecorder) Initialize(c interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockGrayCache)(nil).Initialize), c)
}

// Update mocks base method
func (m *MockGrayCache) Update() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update")
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockGrayCacheMockRecorder) Update() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockGrayCache)(nil).Update))
}

// Clear mocks base method
func (m *MockGrayCache) Clear() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Clear")
	ret0, _ := ret[0].(error)
	return ret0
}

// Clear indicates an expected call of Clear
func (mr *MockGrayCacheMockRecorder) Clear() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Clear", reflect.TypeOf((*MockGrayCache)(nil).Clear))
}

// Name mocks base method
func (m *MockGrayCache) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name
func (mr *MockGrayCacheMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockGrayCache)(nil).Name))
}

// Close mocks base method
func (m *MockGrayCache) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close
func (mr *MockGrayCacheMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockGrayCache)(nil).Close))
}

// GetGrayRule mocks base method
func (m *MockGrayCache) GetGrayRule(name string) []*model0.ClientLabel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGrayRule", name)
	ret0, _ := ret[0].([]*model0.ClientLabel)
	return ret0
}

// GetGrayRule indicates an expected call of GetGrayRule
func (mr *MockGrayCacheMockRecorder) GetGrayRule(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGrayRule", reflect.TypeOf((*MockGrayCache)(nil).GetGrayRule), name)
}

// HitGrayRule mocks base method
func (m *MockGrayCache) HitGrayRule(name string, labels map[string]string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HitGrayRule", name, labels)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HitGrayRule indicates an expected call of HitGrayRule
func (mr *MockGrayCacheMockRecorder) HitGrayRule(name, labels interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HitGrayRule", reflect.TypeOf((*MockGrayCache)(nil).HitGrayRule), name, labels)
}
